@page "/users"
@inject IUsersControllerClient UsersControllerClient
<h2>Create new user</h2>
<div>
    <p>
        Name: <br/>
        <InputText @bind-Value="_userName"/>
        Password: <br />
        <InputText @bind-Value="_password" />
    </p>
    <button @onclick="CreateUser"> Create </button>
</div>
<table>
    <thead><tr><th>Id</th><th>Имя</th><th></th></tr></thead>
    <tbody>
    @foreach (var user in _users)
    {
        <tr>
            <td>@user.Id</td>
            <td>@user.Name</td>
            <td>
                <a href="users/@user.Id"> Просмотреть </a>
            </td>
            <td>
                <button @onclick="async () => await DeleteUser(user.Id)"> Delete </button>
            </td>
        </tr>
    }
    </tbody>
</table>
@code {
    private string? _userName;
    private string? _password;
    private  UserModel[] _users = Array.Empty<UserModel>();

    private async Task CreateUser()
    {
        if (_userName is not null && _password is not null)
        {
            await UsersControllerClient.CreateUser(new CreateUserRequest { Name = _userName, Password = _password });
            _userName = null;
            await LoadData();
        }
    }

    protected override async Task OnInitializedAsync() => await LoadData();
    
    private async Task LoadData()
    {
        var response = await UsersControllerClient.GetAllUsers(new GetAllUsersRequest());
        _users = response.AllUsers;
    }

    private async Task DeleteUser(int userId)
    {
        await UsersControllerClient.DeleteUser(new DeleteUserRequest { UserId = userId });
        await LoadData();
    }
}